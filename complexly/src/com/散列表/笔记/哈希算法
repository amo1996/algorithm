  什么是哈希算法？ (MD5、SHA)
将任意长度的二进制值串映射为固定长度的二进制值串，这个映射的规则就是哈希算法。而通过原始数据映射之后得到的二进制值串就是哈希值。

  哈希算法具有以下特性：
  1、从哈希值不能反向推导出原始数据(所以也叫单向哈希算法);
  2、对输入数据非常敏感，哪怕原始数据只修改了一个字节，最后得到的哈希值也大不相同;
  3、散列冲突的概率要很小，对于不同的原始数据，哈希值相同的概率非常小;
  4、哈希算法的执行效率要尽量高效，针对较长的文本，也能快速计算出哈希值;

  哈希算法的应用：

  一、安全加密：
  比较常用的加密的哈希算法是MD5(Message-Digest Algorithm,MD5消息摘要算法)和SHA(Secure Hash Algorithm,安全散列算法).
  对于用于加密的哈希算法来说，有两点非常重要。1、很难根据哈希值反向推导出原始数据  2、散列冲突的概率要很小
  鸽巢原理(抽屉原理)：如果有10个鸽巢，有11只鸽子，那肯定有一个鸽巢中的鸽子数据大于1个。

  哈希算法产生的哈希值的长度是固定且有限的，MD5是固定的128位二进制串，能表示的数据是有限的，最多能表示2^128个数据，而我们要哈希的数据是无穷的。
  但是因为哈希值的范围很大，冲突的概率极低，所以还是比较难破解的。
  没有绝对安全的加密。越复杂、越难破解的加密算法，需要的计算时间也就越长。

  二、唯一标识：
   哈希算法可以对大数据做信息摘要，通过一个较短的二进制编码来表示很大的数据。
   如果要在海量的图库中，搜索一张图是否存在，我们不能单纯的用图片的元信息(比如图片名称)来对比，因为可能存在名称相同但是图片内容不同，或者名称不同图片相同的情况。

   我们可以给每一个图片取一个唯一标识，或者说信息摘要。
   比如，我们可以从图片的二进制串开头取100个字节，从中间取100个字节，最后再取100个字节，然后放在一块通过哈希算法(比如MD5),得到一个哈希字符串，用它作为图片的唯一标识。

  三、数据校验：
   参考区块链，校验数据的完整性和正确性。是否被篡改过。

  四、散列函数：
  散列函数也是哈希算法的一种应用。
  散列函数对于散列算法计算得到的值，不关心是否能反向解密，更关注散列后的值是否能平均分布。
  散列函数执行的快慢，也会影响散列表的性能，所以散列函数一般比较简单，追求效率。

  五、负载均衡：
   实现一个会话粘滞(session sticky)的负载均衡算法。也就是说，我们需要在同一个客户端上，在一次会话中的所有请求都路由到同一个服务器上。

   我们可以通过哈希算法，对客户端IP地址或者会话ID计算哈希值，将取得的哈希值与服务器列表的大小进行取模运算，得到的值就是应该被路由到的服务器编号。
   这样，我们就可以把同一个IP过来的所有请求，都路由到同一个后端服务器上。

  六、数据分片：
  针对数据比较大，一台机器难以处理，差不多也跟负载均衡意思一样，同样类型的数据就分配到同一个机器上，最后再每个机器分别运算。
  这种处理过程也是MapReduce的基本设计思想。可以突破单机内存、CPU等资源的限制。

  七、分布式存储：
  上面取模的方式没什么问题，但是如果数据增多了，原本设定的机器承受不了，需要扩容的时候，麻烦就来了。
  比如原来是通过10台机器取模，13通过10取模存储在3这台机器上，扩容成11台机器，对11取模，13这个数据就被分配到2号了。
  这时候，所有的数据都要重新计算哈希值，然后搬移到正确的机器上，相当于缓存中的一下都失效了。
  所有的数据请求都会穿透缓存，直接去请求数据库，缓存雪崩。

  一致性哈希算法：(哈希环)
  借助一个虚拟的环和很多虚拟结点，每当有新机器加入，只需要将某几个很小区间的数据搬移到新机器中。
  redis的集群模式就采用哈希环。


