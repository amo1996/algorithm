package com.lz.stack;

/**
 * 栈:
 * @Author LiZhi
 */
public class Stack {

    /**
     *  栈：就像一摞叠在一起的盘子，都是从下往上一个一个放，取都是从上往下一个一个的取，不能从中间任意抽。
     *  后进者先出，先进者后出，这就是栈结构。
     *  1、从栈的操作特性上看：
     *   栈是一种"操作受限"的线性表，只允许在一端插入和删除数据。
     *   从功能上来看：数组或者链表可以替代栈。
     *   但是特定的数据结构是对特定场景的抽象。
     *   数组或链表暴露了太多的操作接口，操作上确实比较灵活，但是使用有时就比较不可控，自然也就容易出错。
     *
     *  当某个数据集合只涉及在一端插入和删除数据，并且满足后进先出、先进后出的特性。我们就应首选"栈"这种数据结构。
     *  栈主要包含两个操作：入栈和出栈，也就是在栈顶插入一个数据和删除一个数据。
     *
     *  栈可以用数组实现，叫作顺序栈。
     *  栈可以用链表实现，叫作链式栈。
     *
     *   用栈实现浏览器的前进、后退：
     *   1、我们使用两个栈 X和Y。
     *   我们把浏览的页面依次压入栈X，当点击后退按钮时，依次从栈X中出栈，并将出栈的数据依次放入栈Y。
     *   当我们点击前进按钮时，我们再从栈Y中取出数据，放入栈X。当栈X中没有数据时，说明没有页面可以继续后退浏览了。
     *   当栈Y没有数据时，说明没有页面可以点击前进按钮浏览了。这也说明了为什么我们后退再跳转到新的页面时，就有页面无法再通过前进查看了。
     *   入栈和出栈的时间复杂度都为O(1)。
     */

}
