
红黑树是平衡二叉查找树的一种。
红黑树是为了解决极端情况下，二叉查找树会退化成链表，时间复杂度会退化到O(N).
红黑树的由来、特性、适用的场景以及能解决的问题？
但凡是用到动态插入、删除、查找数据的场景都可以用红黑树。

 一、平衡二叉查找树:
  定义：二叉树中任意一个节点的左右子树的高度相差不能大于1.
  最先发明的平衡二叉树是AVL树，完全严格符合这个定义。
  但是就是因为完全符合，每次插入或者删除都会对树做大量的调整。
  红黑树其实并没有严格符合上面的定义。
  发明平衡二叉查找树的初衷是：解决普通二叉查找树在频繁的插入、删除等动态更新的情况下，出现时间复杂度退化的问题。

 二、红黑树:
   红黑树中的节点，一类被标记为黑色,一类被标记为红色。
   ·根节点是黑色的;
   ·每个叶子节点定义为黑色的空节点(NIL),也就是说，叶子节点不存储数据;
   ·任何相邻的节点都不能同时为红色,红色节点是被黑色接地那隔开的;
   ·每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点;
   红黑树只是做到了近似平衡，所以在维护平衡的成本上，比AVL树低。
