

一、为什么需要索引:
  如何节省存储空间、如何提高数据增删查改的执行效率。

二、索引的需求定义:
   1.功能性需求:
    数据是格式化数据还是非格式化数据?
    结构化数据，比如MySQL中的数据;
    非结构化数据，搜索引擎中网页;这种数据，需要做预处理，提取出查询关键词，对关键词构造索引。
    数据是静态数据还是动态数据?
    静态数据，不会有数据的增加、删除、更新操作，构建索引的时候，只需要考虑查询效率就可以了。
    动态数据，不仅要考虑到索引的查询效率，在原始数据更新的同时，还需要对索引动态地更新。
    索引存储在内存还是硬盘?
    存储在内存中，那查询的速度肯定要比存储在磁盘中的高。
    如果原始数据量很大的情况下，对应的索引可能也会很大。
    这时候，因为内存有限，可能就不得不将索引存储在磁盘中。
    也可以一部分存储在内存，一部分存储在磁盘。
    单值查找还是区间查找？
    单值查找，根据查询关键词等于某个值的数据。
    区间查找，就是查找关键词处于某个区间的所有数据。
    单关键词查找还是多关键词组合查找？
    搜索引擎中构建的索引，既要支持一个关键词的查找，也要支持组合关键词的查找。

   2.非功能性需求:
     不管是存储在内存中还是磁盘中，索引对存储空间的消耗不能过大。
     在考虑索引查询效率的同时，还要考虑维护索引的成本。

 三、构建索引常用的数据结构:
 常用来构建索引的数据结构，就是几种支持动态数据集合的数据结构。
 比如:散列表、红黑树、跳表、B+树。
 位图、布隆过滤器可以作为辅助索引，有序数组可以对静态数据构建索引。(用二分查找加速)

  散列表增删查改操作性能非常好，时间复杂度是O(1)。一些键值数据库(Redis、Memcache)就是使用散列表来构建索引的，这种一般都构建在内存中。

  红黑树作为一种常用的平衡二叉查找树，数据插入、删除、查找的时间复杂度都是O(logn)，也非常适合用来构建内存索引。

  B+树比起红黑树来说，更加适合构建存储在磁盘中的索引。
  B+树是一个多叉树，所以对相同个数的数据构建索引，B+树的高度要低于红黑树。
  读取B+树索引，需要的磁盘IO次数更少。所以MySQL、Oracle都是用B+树来实现的。

  跳表也支持快速添加、删除、查找数据。可以通过灵活调整索引节点个数和数据个数之间的比例，可以很好的平衡索引对内存的消耗以及查询的效率。
  Redis中的有序集合(sort Set)就是用跳表来构建的。

  布隆过滤器，首先布隆过滤器有一定的判错率，但是尽管对于判定存在的数据，有可能不存在，但是对于判定不存在的数据，那肯定就不存在。
  而且，还有一个更大的特点，内存占用非常少，我们可以针对数据，构建一个布隆过滤器，并且存储在内存中。
  当要查询数据的时候，我们可以先通过布隆过滤器，判定是否存在。如果判定不存在，就没必要读取磁盘中的索引了。

  有序数组，如果数据是静态的，就不会插入、删除、更新操作。可以把数据的关键词抽取出来，组织成有序数组，然后利用二分查找算法来查找数据。


