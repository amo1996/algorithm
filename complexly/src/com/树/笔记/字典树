Trie树，也叫"字典树"。是一个树形结构，专门处理字符串匹配的数据结构。用来解决在一组字符串集合中快速查找某个字符串的问题。

  一、Trie树的主要操作:
    1.将字符串集合构造成Trie树:
       就是一个将字符串插入到Trie树的过程。
    2.在Trie树中查询一个字符串:


  二、Trie树的存储方式:
    通过一个下标与字符一一映射的数组，来存储子节点的指针。
    假设我们的字符串中只有从a到z这26个小写字母，我们在数组中下标为0的位置，存储指向子节点a的指针，下标为1的位置存储指向子节点b的指针，
    以此类推，下标为25的位置，存储的是指向子节点z的指针。如果某个字符的子节点不存在，我们就在对应的下标的位置存储null。

    当我们在Trie树种查找字符串的时候，我们可以通过字符的ASCII码减去"a"的ASCII码，迅速找到匹配的子节点的指针。

    public class Trie{
      private TrieNode root=new TrieNode('/'); //存储无意义字符，代表根节点

      //往Trie树种插入一个字符串
      public void  insert(char[] text){
       TrieNode p=root;
       for(int i=0;i<text.length;i++){
        int index=text[i]-'a';
        if(p.children[index]==null){
         TrieNode newNode = new TrieNode(text[i]);
         p.children[index] = newNode;
        }
         p=p.children[index];
       }
       p.isEndingChar=true;
      }

       //在Trie树中查找一个字符串
       public boolean find(char[] pattern){
        TrieNode p = root;
         for(int i=0;i<pattern.length;i++){
          int index=pattern[i]-'a';
          if(p.children[index] == null){
             return false; //不存在pattern
          }
          p=p.children[index];

         }
         if(p.isEndingChar == false){
            return false;
         }else{
            return true;
         }

         public class TrieNode{
          public char data;
          public TrieNode[] children = new TrieNode[26];
          public boolean isEndingChar = false;
          public TrieNode(char data){
            this.data=data;
          }

         }
       }
    }

     如果要在一组字符串中，频繁地查询某些字符串，用Trie树会非常高效。
     构建Trie树的过程，需要扫描所有的字符串，时间复杂度是O(n)(n表示所有字符串的长度和)。
     每次查询时，如果查询的字符串长度是k，那我们只需要比对大约k个节点，就能完成查询操作。跟原本那组字符串的长度和个数没有关系。
     也就是说，构建好Trie树后，在其中查询字符串的时间复杂度是O(k),k表示要查找的字符串的长度。

   三、Trie的内存消耗:
    在重复的前缀并不多的情况下，Trie不但不能节省内存，还有可能会浪费更多的内存。

   四、Trie与散列表、红黑树的比较:
     1.Trie树对要处理的字符串有严苛的要求:
       ·字符串中包含的字符集不能太大，如果太大了，存储空间可能浪费很多。
       ·要求字符串的前缀重合比较多，不然空间消耗会变大很多。
       ·如果要用Trie树解决问题，那我们需要自己实现一个Trie树，并且保证没有bug。
       ·通过指针串起来的数据块是不连续的，而Trie树种用到了指针，所以对缓存并不友好，性能上会打折扣。

     所以Trie树不太适合精确匹配查找，这种问题更适合用散列表或者红黑树来解决。
     Trie树比较适合的是查找前缀匹配的字符串，也就是搜索引擎类的应用场景。