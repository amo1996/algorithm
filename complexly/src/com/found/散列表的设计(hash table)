好的散列表应该具有以下的特性：
1.支持快速的查询、插入、删除操作。
2.内存占用合理，不能浪费过多的内存空间。
3.性能稳定，极端情况下，散列表的性能也不会退化到无法接受的情况。
设计思路：
1.设计一个合适的散列函数
2.定义合适的装载因子阀值，设计动态扩容策略
3.选择合适的散列冲突解决办法

一、如何设计散列函数？
散列函数设计的好坏决定了散列表冲突的概率大小。直接决定了散列表的性能。
1、散列函数不能太复杂，太复杂的散列函数会消耗很多计算时间。
2、生成的值要尽可能随机并且均匀分布，这样才能最小化散列冲突。不会出现某个槽内数据特别多的情况。

二、装载因子
装载因子越大，说明散列表中的元素越多，空闲位置越少，散列冲突的概率就越大。
当装载因子过大时，我们可以进行动态扩容，来降低装载因子。
实际上，对于动态散列表，随着数据的删除，散列表中的数据会越来越少，
如果我们对空间消耗比较注意，就可以在装载因子小于某个值之后，启动动态缩容。

装载因子阀值的设计要根据时间复杂度、空间复杂度。如果内存空间不紧张，对效率要求很高，可以降低装载因子的阀值。
相反，如果空间紧张，对执行效率要求又不高，可以增加装载因子的值，甚至可以大于1.
（ JDK1.8 HashMap底层就是这样设计的,）

三、如何设计动态扩容？
一次性扩容：扩容成原来的两倍大小，再对之前的数据重新计算哈希值，并且从原来的散列表搬移到新的散列表。
当装载因子到了阀值时，这时插入数据需要先进行扩容，再插入数据。
这个时候，插入数据就会变得很慢，甚至会无法接受。

我们可以将扩容操作穿插在插入操作中，分批完成。
当装载因子到达阀值后，我们只申请新空间，但暂不将老数据搬移到新散列表中。
当有新数据要插入时，我们将新数据插入新散列表中，并且从老散列表拿出一个数据放入到新散列表中。
这样就没有了集中的一次性数据迁移，插入操作就都变得很快了。

但是没有搬移完数据的查询操作怎么查呢？
我们先从新散列表中查找，如果没有找到，再去老的散列表中查找。
这样，任何情况下，我们插入一个数据的时间复杂度都是O(1)。

四、如何选择散列冲突解决办法？
散列冲突解决办法主要有：1、开放寻址法 2、链表法

1、开放寻址法
优点：
      1散列表中的数据都存储在数组中，可以有效利用CPU缓存加快查询速度。
      2序列化比较简单，链表法有指针，序列化没那么容易。
缺点：
      1删除数据比较麻烦，需要特殊标记已经删除的数据。
      2冲突的时候更浪费内存空间。

当数据量比较小、装载因子小的时候，适合采用开放寻址法。也是ThreadLocalMap使用开发寻址法的原因。

2、链表法
优点:
      1内存利用率比开放寻址法高，因为链表结点可以在需要的时候再创建，不需要事先申请好。
      2对大装载因子的容忍度更高，开放寻址法只适用装载因子小于1的情况，接近1时，就可能有大量的散列冲突。
      对于链表法，只要散列函数的值随机均匀，即使装载因子变成10，也只是链表的长度变长了而已，查找效率有所下降。
缺点：
      1链表要存储指针，所以对于小对象的存储，是比较消耗内存的。(存储大对象，指针的内存消耗可以忽略)
      2链表的结点是零散分布在内存中的，不是连续的，对CPU缓存不友好，对于执行效率有一定的影响。

链表法适合存储大对象、大数据量的散列表，比起开放寻址法，更加灵活，支持更多的优化策略。比如用红黑树和链表转换。


HashMap：
1、初始大小：
 HashMap默认的初始大小是16，如果事先知道大概的数据量有多大，可以修改初始大小，减少动态扩容的次数，会提高性能。
2、装载因子和动态扩容：
 最大装载因子默认是0.75，当HashMap中元素个数超过0.75*(散列表的容量)，就会启动扩容，每次扩容为原来的两倍。
3、散列冲突解决办法：
 HashMap采用链表法来解决，在JDK1.8中，引入了红黑树。当链表长度太长(默认超过8)时，链表就转换为红黑树。
 可以利用红黑树快速增删查改的特点，提高HashMap的性能。当红黑树结点个数少于6个时，又会将红黑树转换为链表。
 因为在数据量比较小的情况下，红黑树要维护平衡，比起链表，没明显的优势。
4、散列函数：
       static final int hash(Object key) {
           int h;
           return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
       }